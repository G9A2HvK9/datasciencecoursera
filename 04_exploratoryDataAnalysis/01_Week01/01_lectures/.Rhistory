# Register an application with the Github API here https://github.com/settings/applications. Access the API to get information on your instructors repositories (hint: this is the url you want "https://api.github.com/users/jtleek/repos"). Use this data to find the time that the datasharing repo was created. What time was it created?
library(httr)
library(jsonlite)
a2f6251294c3c140f7bbaba80c0ea4180a6ae2de
#oauth_endpoints('github')
#github_key <- '6cd6f32e32519f86ecfd'
#github_secret <- 'ca835f082f306954100ea4a70f22e19c66012250'
#myapp <- oauth_app('github', key = github_key, secret = github_secret)
#github_token <- oauth2.0_token(oauth_endpoints('github'), myapp)
#gtoken <- config(token = github_token)
req <- GET('api.github.com/users/jtleek/repos')
json1 = content(req)
json2 = jsonlite::fromJSON(toJSON(json1))
colnames(json2)
json2[which(json2$name == 'datasharing')]
# Register an application with the Github API here https://github.com/settings/applications. Access the API to get information on your instructors repositories (hint: this is the url you want "https://api.github.com/users/jtleek/repos"). Use this data to find the time that the datasharing repo was created. What time was it created?
library(httr)
library(jsonlite)
a2f6251294c3c140f7bbaba80c0ea4180a6ae2de
#oauth_endpoints('github')
#github_key <- '6cd6f32e32519f86ecfd'
#github_secret <- 'ca835f082f306954100ea4a70f22e19c66012250'
#myapp <- oauth_app('github', key = github_key, secret = github_secret)
#github_token <- oauth2.0_token(oauth_endpoints('github'), myapp)
#gtoken <- config(token = github_token)
req <- GET('api.github.com/users/jtleek/repos')
json1 = content(req)
json2 = jsonlite::fromJSON(toJSON(json1))
colnames(json2)
json2[which(json2$name == 'datasharing'), ]
# Register an application with the Github API here https://github.com/settings/applications. Access the API to get information on your instructors repositories (hint: this is the url you want "https://api.github.com/users/jtleek/repos"). Use this data to find the time that the datasharing repo was created. What time was it created?
library(httr)
library(jsonlite)
a2f6251294c3c140f7bbaba80c0ea4180a6ae2de
#oauth_endpoints('github')
#github_key <- '6cd6f32e32519f86ecfd'
#github_secret <- 'ca835f082f306954100ea4a70f22e19c66012250'
#myapp <- oauth_app('github', key = github_key, secret = github_secret)
#github_token <- oauth2.0_token(oauth_endpoints('github'), myapp)
#gtoken <- config(token = github_token)
req <- GET('api.github.com/users/jtleek/repos')
json1 = content(req)
json2 = jsonlite::fromJSON(toJSON(json1))
colnames(json2)
json2[which(json2$name == 'datasharing'), 'created_at']
download.file(url = 'https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv', destfile = './courses/datasciencecoursera/03_gettingAndCleaningData/02_Week02/americanCommunitySurveyData.csv')
install.packages('sqldf')
acs <- read.csv(file = './courses/datasciencecoursera/03_gettingAndCleaningData/02_Week02/americanCommunitySurveyData.csv', sep = ',')
acs
?sqldf
sqldf('select pwgtp1 from acs where AGEP < 50')
??sqldf
# Register an application with the Github API here https://github.com/settings/applications. Access the API to get information on your instructors repositories (hint: this is the url you want "https://api.github.com/users/jtleek/repos"). Use this data to find the time that the datasharing repo was created. What time was it created?
library(httr)
library(jsonlite)
#oauth_endpoints('github')
#github_key <- 'XXX'
#github_secret <- 'XXX'
#myapp <- oauth_app('github', key = github_key, secret = github_secret)
#github_token <- oauth2.0_token(oauth_endpoints('github'), myapp)
#gtoken <- config(token = github_token)
req <- GET('api.github.com/users/jtleek/repos')
json1 = content(req)
json2 = jsonlite::fromJSON(toJSON(json1))
colnames(json2)
json2[which(json2$name == 'datasharing'), 'created_at']
## Answer: "2013-11-07T13:25:07Z"
library(sqldf)
download.file(url = 'https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv', destfile = './courses/datasciencecoursera/03_gettingAndCleaningData/02_Week02/americanCommunitySurveyData.csv')
acs <- read.csv(file = './courses/datasciencecoursera/03_gettingAndCleaningData/02_Week02/americanCommunitySurveyData.csv', sep = ',')
sqldf('select pwgtp1 from acs where AGEP < 50')
library(sqldf)
install.packages('chron')
install.packages('chron')
library(sqldf)
url <- 'http://biostat.jhsph.edu/~jleek/contact.html'
html <- GET(url)
content <- content(html, as = 'text')
parsedHtml <- htmlParse(content2, asText = TRUE)
parsedHtml
n.readLines(parsedHtml, 1, skip = 10)
?readLines
?nchar
parsedHtml[10]
html[10]
html
nchar(html[10])
html[10]
content[10]
content
nchar(parsedHtml[10])
con <- url('http://biostat.jhsph.edu/~jleek/contact.html')
htmlCode <- readLines(con)
htmlCode[10]
con <- url('http://biostat.jhsph.edu/~jleek/contact.html')
htmlCode <- readLines(con)
nchar(htmlCode[10])
con <- url('http://biostat.jhsph.edu/~jleek/contact.html')
htmlCode <- readLines(con)
nchar(htmlCode[10])
nchar(htmlCode[20])
nchar(htmlCode[30])
nchar(htmlCode[100])
download.file(url = 'https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for', dest = './courses/datasciencecoursera/03_gettingAndCleaningData/02_Week02/noaaData.for')
install.packages('ff')
install.packages('read.fwf')
setRepositories()
install.packages('read.fwf')
getwd()
setwd('./courses/datasciencecoursera/04_exploratoryDataAnalysis/01_Week01/01_lectures')
file.create('./05_theBasePlottingSysteminR.R')
?par
library(datasets)
hist(airquality$Ozone)
with(airquality, plot(Wind, Ozone))
boxplot(Ozone ~ Month, airquality, xlab = 'Month', ylab = 'Ozone (ppb)')
## Default values for global graphics parameters:
par('bg')
par('mar')
par('mfrow') ##
file.create('./06_theBasePlottingSysteminR(2).R')
library(datasets)
with(airquality, plot(Wind, Ozone))
title(main = 'Ozone and Wind in New York City') ## Adds title
with(subset(airquality, Month == 5), points(Wind, Ozone, col = 'blue'))
with(airquality, plot(Wind, Ozone, main = 'Ozone and Wind in New York City'))
with(subset(airquality, Month == 5), points(Wind, Ozone, col = 'blue'))
with(airquality, plot(Wind, Ozone, main = 'Ozone and Wind in New York City', type = 'n'))
with(airquality, plot(Wind, Ozone, main = 'Ozone and Wind in New York City', type = 'n'))
with(subset(airquality, Month == 5), points(Wind, Ozone, col = 'blue'))
with(subset(airquality, Month != 5), points(Wind, Ozone, col = 'blue'))
legend('topright', pch = 1, col = ('blue', 'red'), legend = c('May', 'Other Months'))
with(airquality, plot(Wind, Ozone, main = 'Ozone and Wind in New York City', type = 'n'))
with(subset(airquality, Month == 5), points(Wind, Ozone, col = 'blue'))
with(subset(airquality, Month != 5), points(Wind, Ozone, col = 'blue'))
legend('topright', pch = 1, col = c('blue', 'red'), legend = c('May', 'Other Months'))
with(subset(airquality, Month != 5), points(Wind, Ozone, col = 'red'))
with(airquality, plot(Wind, Ozone, main = 'Ozone and Wind in New York City', type = 'n'))
with(subset(airquality, Month == 5), points(Wind, Ozone, col = 'blue'))
with(subset(airquality, Month != 5), points(Wind, Ozone, col = 'red'))
legend('topright', pch = 1, col = c('blue', 'red'), legend = c('May', 'Other Months'))
with(airquality, plot(Wind, Ozone, main = 'Ozone and Wind in New York City', pch = 20))
model <- lm(Ozone ~ Wind, airquality)
abline(model, lwd = 2)
par(mfrow = c(1, 2))
par(mfrow = c(1, 2))
with(airquality, {
plot(Wind, Ozone, main = 'Ozone and Wind')
plot(Solar.R, Ozone, main = 'Ozone and Solar Radiation')
})
par(mfrow = c(1, 3), mar = c(4, 4, 2, 1), oma = c(0,0,2,0))
with(airquality, {
plot(Wind, Ozone, main = 'Ozone and Wind')
plot(Solar.R, Ozone, main = 'Ozone and Solar Radiation')
plot(Temp, Ozone, main = 'Ozone and Temperature')
mtext('Ozone and Weather in New York City', outer = TRUE)
})
file.create('./07_basePlottingDemonstration.R')
open('./07_basePlottingDemonstration.R')
open(con = './07_basePlottingDemonstration.R')
file.edit('./07_basePlottingDemonstration.R')
hist(x) ## plots histogram of x without any manual params
x <- rnorm(100) ## creates variable storing 100 randomly distributed numbers
hist(x) ## plots histogram of x without any manual params
x <- rnorm(100) ## creates variable storing 100 randomly distributed numbers
hist(x) ## plots histogram of x without any manual params
## plotting commands have a number of default parameters
x <- rnorm(100) ## creates variable storing 100 randomly distributed numbers
hist(x) ## plots histogram of x without any manual params
plot(x, y)
y <- rnorm(100) ## creates variable storing 100 randomly distributed numbers
plot(x, y)
plot(x, z)
z <- rnorm(100) ## creates variable storing 100 randomly distributed numbers
plot(x, z)
par(mar = c(2,2,2,2))
plot(x, z)
par(mar = c(4,4,2,2))
plot(x, z)
plot(x, y, pch = 20) ## plots x and y on a scatterblot, using params to set the tick type
plot(x, y, pch = 19)
plot(x, y, pch = 18)
plot(x, y, pch = 01)
plot(x, y, pch = 02)
plot(x, y, pch = 03)
plot(x, y, pch = 17)
plot(x, y, pch = 16)
plot(x, y, pch = 25)
plot(x, y, pch = 15)
plot(x, y, pch = 14)
plot(x, y, pch = 14)
plot(x, y, pch = 13)
0
plot(x, y, pch = 20) ## plots x and y on a scatterblot, using params to set the tick type
plot(x, y, pch = 19)
plot(x, y, pch = 18)
plot(x, y, pch = 17)
plot(x, y, pch = 16)
plot(x, y, pch = 15)
plot(x, y, pch = 14)
plot(x, y, pch = 13)
plot(x, y, pch = 12)
plot(x, y, pch = 11)
plot(x, y, pch = 10)
plot(x, y, pch = 9)
plot(x, y, pch = 08)
plot(x, y, pch = 07)
plot(x, y, pch = 06)
plot(x, y, pch = 05)
plot(x, y, pch = 04)
plot(x, y, pch = 03)
plot(x, y, pch = 02)
plot(x, y, pch = 01)
plot(x, y, pch = 00)
## plots x and y on a scatterblot, using params to set the tick type differently in each example
plot(x, y, pch = 20)
example(points)
## Demonstrating the base plotting system in R
## plotting commands have a number of default parameters
x <- rnorm(100) ## creates variable storing 100 randomly distributed numbers
hist(x) ## plots histogram of x without any manual params
y <- rnorm(100) ## creates variable storing 100 randomly distributed numbers
plot(x, y) ## plots x and y on a scatterblot without any manual params
z <- rnorm(100) ## creates variable storing 100 randomly distributed numbers
plot(x, z) ## plots x and z on a scatterblot without any manual params
par(mar = c(4,4,2,2)) ## sets params (margin)
plot(x, z) ## plots x and z on a scatterblot with previosuly set params
## plots x and y on a scatterblot, using params to set the tick type differently in each example
plot(x, y, pch = 20)
plot(x, y, pch = 19)
plot(x, y, pch = 18)
plot(x, y, pch = 17)
plot(x, y, pch = 16)
plot(x, y, pch = 15)
plot(x, y, pch = 14)
plot(x, y, pch = 13)
plot(x, y, pch = 12)
plot(x, y, pch = 11)
plot(x, y, pch = 09)
plot(x, y, pch = 08)
plot(x, y, pch = 07)
plot(x, y, pch = 06)
plot(x, y, pch = 05)
plot(x, y, pch = 04)
plot(x, y, pch = 03)
plot(x, y, pch = 02)
plot(x, y, pch = 01)
plot(x, y, pch = 00)
## example(points) ## shows a number of examples of plotting symbols
text(-2, -2, 'label')
legend('topleft', legend = 'Data', pch = 00)
fit <- lm(y ~ x)
abline(fit)
abline(fit, lwd = 3)
abline(fit, lwd = 3) ## adds 'fit' to plot, specifying thickness of the line
plot(x, y, xlab = 'Weight', ylab = 'Height', main = 'Scatterplot', pch = 00)
plot(x, y, xlab = 'Weight', ylab = 'Height', main = 'Scatterplot', pch = 00)
legend('topright', legend = 'Data', pch = 00)
fit <- lm(x ~ y)
abline(fit, lwd = 3, col = 'red')
## generates plot from x and y variable, adds legend and line of best fit
plot(x, y, xlab = 'Weight', ylab = 'Height', main = 'Scatterplot', pch = 00)
legend('topright', legend = 'Data', pch = 00)
fit <- lm(x ~ y)
abline(fit, lwd = 3, col = 'red')
z <- rpois(100, 2)
par(mfrow = c(2, 1))
z <- rpois(100, 2)
par(mfrow = c(2, 1))
plot(x, y, pch = 00)
plot(x, z, pch = 02)
## plots x,y and x,z above each other
par(mfrow = c(2, 1), mar = c(2,2,1,1))
plot(x, y, pch = 00)
plot(x, z, pch = 02)
## plots x,y and x,z above each other
par(mfrow = c(2, 1), mar = c(2,2,2,2))
plot(x, y, pch = 00)
plot(x, z, pch = 02)
## sets plotting space to 2 col. and 2 row
mfcol(2, 2)
plot(x, y)
plot(x, z)
plot(y, z)
plot(y, x)
## sets plotting space to 2 row and 2 col.
par(mfrow = c(2, 2))
plot(x, y)
plot(x, z)
plot(y, z)
plot(y, x)
## sets plotting space to 2 col. and 2 row Graphs are added column first
par(mfcol = c(2, 2))
plot(x, y)
plot(x, z)
plot(y, z)
plot(y, x)
x <- rnorm(100)
y <- x + rnorm(100)
x <- rnorm(100)
y <- x + rnorm(100)
g <- gl(2, 50)
g <- gl(2, 50, labels = c('male', 'female'))
str(g)
plot(x, y)
plot(x, y, type = 'n')
## adds male data
point(x[g == 'Male'], y[g == 'Male'], col = 'purple')
## adds male data
point(x[g == 'male'], y[g == 'male'], col = 'purple')
## adds male data
point(x[g == 'male'], y[g == 'male'], col = 'blue')
## adds male data
points(x[g == 'male'], y[g == 'male'], col = 'blue')
points(x[g == 'female'], y[g == 'female', col = 'pink'])
points(x[g == 'female'], y[g == 'female'], col = 'pink'])
points(x[g == 'female'], y[g == 'female'], col = 'pink')
points(x[g == 'female'], y[g == 'female'], col = 'red')
## generates plot but does not add data quite yet
plot(x, y, type = 'n')
## adds male data and female data via 'points' function
points(x[g == 'male'], y[g == 'male'], col = 'blue')
points(x[g == 'female'], y[g == 'female'], col = 'red')
library(swirl)
swirl()
head(airquality)
range(airquality$Ozone, na.rm = TRUE)
hist(airquality$Ozone)
table(airquality$Month)
boxplot(Ozone ~ Month, airquality)
boxplot(Ozone ~ Month, airquality, xlab = 'Month', ylab = 'Ozone (ppb', col.axis = 'blue', col.lab = 'red')
boxplot(Ozone ~ Month, airquality, xlab = 'Month', ylab = 'Ozone (ppb)', col.axis = 'blue', col.lab = 'red')
main('Ozone and Wind in New York City')
title('Ozone and Wind in New York City')
with(airquality, plot(airquality$Wind, airquality$Ozone))
with(airquality, plot(Wind, Ozone))
main('Ozone and Wind in New York City')
with(airquality, plot(Wind, Ozone), main = 'Ozone and Wind in New York City')
title('Ozone and Wind in New York City')
length(par())
names(par())
par()$pin
par('fg')
par('pch')
par('lty')
plot(airquality$Wind, airquality$Ozone, type = n)
plot(airquality$Wind, airquality$Ozone, type = 'n')
title(main = 'Wind and Ozone in New York City')
title(main = 'Wind and Ozone in NYC')
may <- airquality[airquality$month == 5]
may <- airquality[airquality$month == 'may']
may <- airquality[airquality$Month == 5]
may <- airquality[airquality$Month == 5]
may <- subset(airquality, Month == 5)
points(may, pch = 02, col = 'blue')
points(may$Wind, may$Ozone, pch = 17, col = 'blue')
points(may$Wind, may$Ozone, col = 'blue', pch = 17)
notmay <- subset(airquality, Month != 5)
points(notmay$Wind, notmay$Ozone, col = 'red', pch = 17)
points(notmay$Wind, notmay$Ozone, col = 'red', pch = 8)
legend('topright', pch = c(17, 8), col = c('blue', 'red'), legend = c('May', 'other Months'))
legend('topright', pch = c(17, 8), col = c('blue', 'red'), legend = c('May', 'Other Months'))
abline(v=median(airquality$Wind, lty = 2, lwd = 2)
abline(v=median(airquality$Wind), lty = 2, lwd = 2)
par(mfrow = c(1, 2))
plot(airquality$Wind, airquality$Ozone, main = 'Ozone and Wind')
plot(airquality$Ozone, airquality$Solar.R, main = 'Ozone and Solar Radiation')
par(mfrow = c(1, 3), mar = c(4,4,2,1), oma = c(0,0,2,0))
plot(airquality$Wind, airquality$Ozone, main = 'Ozone and Wind')
plot(airquality$Solar.R, airquality$Ozone, main = 'Ozone and Solar Radiation')
plot(airquality$Temp, airquality$Ozone, main = 'Ozone and Temperature')
mtext('Ozone and Weather in New York City', outer = TRUE)
getwd()
file.create('./graphicsDevicesinR1.R')
file.edit('./07_basePlottingDemonstration.R')
file.edit('./graphicsDevicesinR1.R')
file.rename('./graphicsDevicesinR1.R', './08_graphicsDevicesinR1.R')
file.edit('./08_graphicsDevicesinR1.R')
## List of all devices can be found with: ?Devices
?Devices
library(datasets)
with(faithful, plot(eruptions, waiting))
title(main = 'Old Faithful Geysir Data')
library(datasets)
with(faithful, plot(eruptions, waiting))
title(main = 'Old Faithful Geysir Data')
## To export plots to a file device, the common procedure is to open the graphics device first:
pdf(file = 'myplot.pdf')
with(faithful, plot(eruptions, waiting))
title(main = 'Old Faithful Geysir Data')
dev.off()
file.create('./09_graphicsDevicesinR2.R')
file.edit('./09_graphicsDevicesinR2.R')
## Functionality around graphics devices:
## - possible to open multiple at once for viewing
## - can only write one at a time
## - currently open graphics devices are called with dev.cur()
dev.cur()
dev.set(3)
dev.cur()
library(datasets)
with(faithful, plot(eruptions, waiting))
title(main = 'Old Faithful Geysir Data')
dev.copy(png, file = 'geysirplot.png')
dev.off()
clear()
webtext <- xml2::read_html('https://de.wikipedia.org/wiki/Liste_der_Groß-_und_Mittelstädte_in_Deutschland')
webtext
parsed <- XML::xmlParse(webtext)
parsed
library(dplyr); library(rvest); library(xml2)
webtext <- read_html('https://de.wikipedia.org/wiki/Liste_der_Groß-_und_Mittelstädte_in_Deutschland')
webtext
webtext[1]
View(webtext)
View(webtext)
url <- 'https://de.wikipedia.org/wiki/Liste_der_Groß-_und_Mittelstädte_in_Deutschland'
temp <- url %>%
html %>%
html_nodes('table')
temp <- url %>%
read_html %>%
html_nodes('table')
temp
temp[2]
View(temp)
xml_attr(temp)
xml_attr(temp, 'table')
xml_attr(temp[2], 'table')
html_table(temp[2])
data.table::fread(html_table(temp[2]))
table <- html_table(temp[2])
table
data.table::fread(table)
head(table)
table <- html_table(temp[2], header = TRUE, dec = '.')
table
names(table)
head(table)
page <- read_html('https://de.wikipedia.org/wiki/Liste_der_Großstädte_in_Deutschland')
tbls <- html_nodes(page, 'table')
tbls
html_table(tbls)
html_table(tbls, fill =TRUE)
table <- html_table(tbls[1])
table
table[1]
df <- unlist(table)
df
table
df <- unlist(table[1])
df
df <- unlist(table[1][1])
df
df <- data.frame(unlist(table))
df
df <- data.frame(unlist(table[1]))
df
df <- data.frame(unlist(table[[1]]))
df
table
table[[1]]
head(table[[1]])
names(table[[1]])
table <- table[[1]]
table$`2018`
dat <- data.table::fread(table, dec = '.', colClasses = c('integer', 'character', 'integer', 'integer', 'integer', 'integer', 'integer', 'integer', 'factor'))
table$Rang <- as.numeric('table$Rang')
table$Rang
View(tbls)
table <- html_table(temp[2], header = TRUE, dec = '.')
table
dat <- table[[1]]
dat
head(dat)
class(dat$Rang)
class(dat$2018)
class(dat$`2018`)
dat$'2018' <- as.numeric(dat$'2018')
dat <- table[[1]]
dat$'2018' <- gsub('.', '', dat$'2018')
head(dat)
dat <- table[[1]]
dat$'2018' <- lapply(dat$'2018', gsub, '.', '')
head(dat)
dat <- table[[1]]
head(dat)
sapply(dat, function(v){as.numeric(gsub('\\.', '', as.character(v)))})
?gsub
dat <- table[[1]]
sapply(dat$'2018', gsub, '\\.', '')
sapply(dat$'2018', function(x){as.numeric(gsub('\\.', '', as.character(x)))})
dat$'2018 <- sapply(dat$'2018', function(x){as.numeric(gsub('\\.', '', as.character(x)))})
dat$'2018' <- sapply(dat$'2018', function(x){as.numeric(gsub('\\.', '', as.character(x)))})
head(dat)
dat$'1970' <- sapply(dat$'1970', function(x){as.numeric(gsub('\\.', '', as.character(x)))})
head(dat)
dat$'1980' <- sapply(dat$'1980', function(x){as.numeric(gsub('\\.', '', as.character(x)))})
head(dat)
dat$'1980'
subdata <- dat$'2018'[which(dat$'2018' >= 100000)]
subdata
mean(subdata)
sum(subdata)
list <- lapply(subdata)
lapply <- function(x){ x * 0.000616}
subdata
subdata <- [1] 3644826 1841179 1471508 1085664  753056  634830  619294  587857  587010  583109  569352  554649  538068  518365  498590  364628  354382
[18]  333786  327258  314319  313092  309370  295135  278342  261454  260654  248292  247548  247380  247237  239257  238697  230241  227020
[35]  217198  217118  213699  210829  208886  201585  188814  180741  179111  178089  171061  170880  168210  164748  163838  160355  159360
[52]  159207  156374  153796  152610  150580  136981  128744  127880  127748  126329  125960  125542  124151  119801  117383  115966  114024
[69]  113634  112267  111966  111962  111407  110994  110636  104948  103725  102836  101990  100219  100194
