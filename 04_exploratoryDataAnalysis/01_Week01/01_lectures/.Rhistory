github_key <- '1b9145c5a99c707b6e6a'
github_secret <- '0d6c20b94d9a08a3ed08ad0468c4cc1f72334295'
myapp <- oauth_app('github', key = github_key, secret = github_secret)
github_token <- oauth2.0_token(oauth_endpoints('github'), myapp)
gtoken <- config(token = github_token)
req <- GET('api.github.com/users/jtleek/repos')
stop_for_status(req)
content(req)
# Register an application with the Github API here https://github.com/settings/applications. Access the API to get information on your instructors repositories (hint: this is the url you want "https://api.github.com/users/jtleek/repos"). Use this data to find the time that the datasharing repo was created. What time was it created?
library(httr)
library(jsonlite)
oauth_endpoints <- ('github')
github_key <- '1b9145c5a99c707b6e6a'
github_secret <- '0d6c20b94d9a08a3ed08ad0468c4cc1f72334295'
myapp <- oauth_app('github', key = github_key, secret = github_secret)
github_token <- oauth2.0_token(oauth_endpoints('github'), myapp)
gtoken <- config(token = github_token)
req <- GET('api.github.com/users/jtleek/repos')
content(req)
# Register an application with the Github API here https://github.com/settings/applications. Access the API to get information on your instructors repositories (hint: this is the url you want "https://api.github.com/users/jtleek/repos"). Use this data to find the time that the datasharing repo was created. What time was it created?
library(httr)
library(jsonlite)
oauth_endpoints <- ('github')
github_key <- '1b9145c5a99c707b6e6a'
github_secret <- '0d6c20b94d9a08a3ed08ad0468c4cc1f72334295'
myapp <- oauth_app('github', key = github_key, secret = github_secret)
github_token <- oauth2.0_token(oauth_endpoints('github'), myapp)
gtoken <- config(token = github_token)
req <- GET('api.github.com/users/jtleek/repos')
content(req)
?oauth_endpoints
# Register an application with the Github API here https://github.com/settings/applications. Access the API to get information on your instructors repositories (hint: this is the url you want "https://api.github.com/users/jtleek/repos"). Use this data to find the time that the datasharing repo was created. What time was it created?
library(httr)
library(jsonlite)
a2f6251294c3c140f7bbaba80c0ea4180a6ae2de
oauth_endpoints('github')
github_key <- '1b9145c5a99c707b6e6a'
github_secret <- '0d6c20b94d9a08a3ed08ad0468c4cc1f72334295'
myapp <- oauth_app('github', key = github_key, secret = github_secret)
github_token <- oauth2.0_token(oauth_endpoints('github'), myapp)
gtoken <- config(token = github_token)
req <- GET('api.github.com/users/jtleek/repos')
content(req)
# Register an application with the Github API here https://github.com/settings/applications. Access the API to get information on your instructors repositories (hint: this is the url you want "https://api.github.com/users/jtleek/repos"). Use this data to find the time that the datasharing repo was created. What time was it created?
library(httr)
library(jsonlite)
a2f6251294c3c140f7bbaba80c0ea4180a6ae2de
oauth_endpoints('github')
github_key <- '1b9145c5a99c707b6e6a'
github_secret <- '0d6c20b94d9a08a3ed08ad0468c4cc1f72334295'
myapp <- oauth_app('github', key = github_key, secret = github_secret)
github_token <- oauth2.0_token(oauth_endpoints('github'), myapp)
gtoken <- config(token = github_token)
req <- GET('api.github.com/users/jtleek/repos')
content(req)
# Register an application with the Github API here https://github.com/settings/applications. Access the API to get information on your instructors repositories (hint: this is the url you want "https://api.github.com/users/jtleek/repos"). Use this data to find the time that the datasharing repo was created. What time was it created?
library(httr)
library(jsonlite)
a2f6251294c3c140f7bbaba80c0ea4180a6ae2de
oauth_endpoints('github')
github_key <- '6cd6f32e32519f86ecfd'
github_secret <- 'ca835f082f306954100ea4a70f22e19c66012250'
myapp <- oauth_app('github', key = github_key, secret = github_secret)
github_token <- oauth2.0_token(oauth_endpoints('github'), myapp)
gtoken <- config(token = github_token)
req <- GET('api.github.com/users/jtleek/repos')
content(req)
# Register an application with the Github API here https://github.com/settings/applications. Access the API to get information on your instructors repositories (hint: this is the url you want "https://api.github.com/users/jtleek/repos"). Use this data to find the time that the datasharing repo was created. What time was it created?
library(httr)
library(jsonlite)
a2f6251294c3c140f7bbaba80c0ea4180a6ae2de
#oauth_endpoints('github')
#github_key <- '6cd6f32e32519f86ecfd'
#github_secret <- 'ca835f082f306954100ea4a70f22e19c66012250'
#myapp <- oauth_app('github', key = github_key, secret = github_secret)
#github_token <- oauth2.0_token(oauth_endpoints('github'), myapp)
#gtoken <- config(token = github_token)
req <- GET('api.github.com/users/jtleek/repos')
content(req)
# Register an application with the Github API here https://github.com/settings/applications. Access the API to get information on your instructors repositories (hint: this is the url you want "https://api.github.com/users/jtleek/repos"). Use this data to find the time that the datasharing repo was created. What time was it created?
library(httr)
library(jsonlite)
a2f6251294c3c140f7bbaba80c0ea4180a6ae2de
#oauth_endpoints('github')
#github_key <- '6cd6f32e32519f86ecfd'
#github_secret <- 'ca835f082f306954100ea4a70f22e19c66012250'
#myapp <- oauth_app('github', key = github_key, secret = github_secret)
#github_token <- oauth2.0_token(oauth_endpoints('github'), myapp)
#gtoken <- config(token = github_token)
req <- GET('api.github.com/users/jtleek/repos')
req
# Register an application with the Github API here https://github.com/settings/applications. Access the API to get information on your instructors repositories (hint: this is the url you want "https://api.github.com/users/jtleek/repos"). Use this data to find the time that the datasharing repo was created. What time was it created?
library(httr)
library(jsonlite)
a2f6251294c3c140f7bbaba80c0ea4180a6ae2de
#oauth_endpoints('github')
#github_key <- '6cd6f32e32519f86ecfd'
#github_secret <- 'ca835f082f306954100ea4a70f22e19c66012250'
#myapp <- oauth_app('github', key = github_key, secret = github_secret)
#github_token <- oauth2.0_token(oauth_endpoints('github'), myapp)
#gtoken <- config(token = github_token)
req <- GET('api.github.com/users/jtleek/repos')
json1 = content(req)
json2 = jsonlite::fromJSON(toJSON(json1))
# Register an application with the Github API here https://github.com/settings/applications. Access the API to get information on your instructors repositories (hint: this is the url you want "https://api.github.com/users/jtleek/repos"). Use this data to find the time that the datasharing repo was created. What time was it created?
library(httr)
library(jsonlite)
a2f6251294c3c140f7bbaba80c0ea4180a6ae2de
#oauth_endpoints('github')
#github_key <- '6cd6f32e32519f86ecfd'
#github_secret <- 'ca835f082f306954100ea4a70f22e19c66012250'
#myapp <- oauth_app('github', key = github_key, secret = github_secret)
#github_token <- oauth2.0_token(oauth_endpoints('github'), myapp)
#gtoken <- config(token = github_token)
req <- GET('api.github.com/users/jtleek/repos')
json1 = content(req)
json2 = jsonlite::fromJSON(toJSON(json1))
json2
# Register an application with the Github API here https://github.com/settings/applications. Access the API to get information on your instructors repositories (hint: this is the url you want "https://api.github.com/users/jtleek/repos"). Use this data to find the time that the datasharing repo was created. What time was it created?
library(httr)
library(jsonlite)
a2f6251294c3c140f7bbaba80c0ea4180a6ae2de
#oauth_endpoints('github')
#github_key <- '6cd6f32e32519f86ecfd'
#github_secret <- 'ca835f082f306954100ea4a70f22e19c66012250'
#myapp <- oauth_app('github', key = github_key, secret = github_secret)
#github_token <- oauth2.0_token(oauth_endpoints('github'), myapp)
#gtoken <- config(token = github_token)
req <- GET('api.github.com/users/jtleek/repos')
json1 = content(req)
json2 = jsonlite::fromJSON(toJSON(json1))
json2[which(name = 'datasharing')]
# Register an application with the Github API here https://github.com/settings/applications. Access the API to get information on your instructors repositories (hint: this is the url you want "https://api.github.com/users/jtleek/repos"). Use this data to find the time that the datasharing repo was created. What time was it created?
library(httr)
library(jsonlite)
a2f6251294c3c140f7bbaba80c0ea4180a6ae2de
#oauth_endpoints('github')
#github_key <- '6cd6f32e32519f86ecfd'
#github_secret <- 'ca835f082f306954100ea4a70f22e19c66012250'
#myapp <- oauth_app('github', key = github_key, secret = github_secret)
#github_token <- oauth2.0_token(oauth_endpoints('github'), myapp)
#gtoken <- config(token = github_token)
req <- GET('api.github.com/users/jtleek/repos')
json1 = content(req)
json2 = jsonlite::fromJSON(toJSON(json1))
json2[which(name == 'datasharing')]
# Register an application with the Github API here https://github.com/settings/applications. Access the API to get information on your instructors repositories (hint: this is the url you want "https://api.github.com/users/jtleek/repos"). Use this data to find the time that the datasharing repo was created. What time was it created?
library(httr)
library(jsonlite)
a2f6251294c3c140f7bbaba80c0ea4180a6ae2de
#oauth_endpoints('github')
#github_key <- '6cd6f32e32519f86ecfd'
#github_secret <- 'ca835f082f306954100ea4a70f22e19c66012250'
#myapp <- oauth_app('github', key = github_key, secret = github_secret)
#github_token <- oauth2.0_token(oauth_endpoints('github'), myapp)
#gtoken <- config(token = github_token)
req <- GET('api.github.com/users/jtleek/repos')
json1 = content(req)
json2 = jsonlite::fromJSON(toJSON(json1))
json2[which(json2$name == 'datasharing')]
# Register an application with the Github API here https://github.com/settings/applications. Access the API to get information on your instructors repositories (hint: this is the url you want "https://api.github.com/users/jtleek/repos"). Use this data to find the time that the datasharing repo was created. What time was it created?
library(httr)
library(jsonlite)
a2f6251294c3c140f7bbaba80c0ea4180a6ae2de
#oauth_endpoints('github')
#github_key <- '6cd6f32e32519f86ecfd'
#github_secret <- 'ca835f082f306954100ea4a70f22e19c66012250'
#myapp <- oauth_app('github', key = github_key, secret = github_secret)
#github_token <- oauth2.0_token(oauth_endpoints('github'), myapp)
#gtoken <- config(token = github_token)
req <- GET('api.github.com/users/jtleek/repos')
json1 = content(req)
json2 = jsonlite::fromJSON(toJSON(json1))
colnames(json2)
json2[which(json2$name == 'datasharing')]
# Register an application with the Github API here https://github.com/settings/applications. Access the API to get information on your instructors repositories (hint: this is the url you want "https://api.github.com/users/jtleek/repos"). Use this data to find the time that the datasharing repo was created. What time was it created?
library(httr)
library(jsonlite)
a2f6251294c3c140f7bbaba80c0ea4180a6ae2de
#oauth_endpoints('github')
#github_key <- '6cd6f32e32519f86ecfd'
#github_secret <- 'ca835f082f306954100ea4a70f22e19c66012250'
#myapp <- oauth_app('github', key = github_key, secret = github_secret)
#github_token <- oauth2.0_token(oauth_endpoints('github'), myapp)
#gtoken <- config(token = github_token)
req <- GET('api.github.com/users/jtleek/repos')
json1 = content(req)
json2 = jsonlite::fromJSON(toJSON(json1))
colnames(json2)
json2[which(json2$name == 'datasharing'), ]
# Register an application with the Github API here https://github.com/settings/applications. Access the API to get information on your instructors repositories (hint: this is the url you want "https://api.github.com/users/jtleek/repos"). Use this data to find the time that the datasharing repo was created. What time was it created?
library(httr)
library(jsonlite)
a2f6251294c3c140f7bbaba80c0ea4180a6ae2de
#oauth_endpoints('github')
#github_key <- '6cd6f32e32519f86ecfd'
#github_secret <- 'ca835f082f306954100ea4a70f22e19c66012250'
#myapp <- oauth_app('github', key = github_key, secret = github_secret)
#github_token <- oauth2.0_token(oauth_endpoints('github'), myapp)
#gtoken <- config(token = github_token)
req <- GET('api.github.com/users/jtleek/repos')
json1 = content(req)
json2 = jsonlite::fromJSON(toJSON(json1))
colnames(json2)
json2[which(json2$name == 'datasharing'), 'created_at']
download.file(url = 'https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv', destfile = './courses/datasciencecoursera/03_gettingAndCleaningData/02_Week02/americanCommunitySurveyData.csv')
install.packages('sqldf')
acs <- read.csv(file = './courses/datasciencecoursera/03_gettingAndCleaningData/02_Week02/americanCommunitySurveyData.csv', sep = ',')
acs
?sqldf
sqldf('select pwgtp1 from acs where AGEP < 50')
??sqldf
# Register an application with the Github API here https://github.com/settings/applications. Access the API to get information on your instructors repositories (hint: this is the url you want "https://api.github.com/users/jtleek/repos"). Use this data to find the time that the datasharing repo was created. What time was it created?
library(httr)
library(jsonlite)
#oauth_endpoints('github')
#github_key <- 'XXX'
#github_secret <- 'XXX'
#myapp <- oauth_app('github', key = github_key, secret = github_secret)
#github_token <- oauth2.0_token(oauth_endpoints('github'), myapp)
#gtoken <- config(token = github_token)
req <- GET('api.github.com/users/jtleek/repos')
json1 = content(req)
json2 = jsonlite::fromJSON(toJSON(json1))
colnames(json2)
json2[which(json2$name == 'datasharing'), 'created_at']
## Answer: "2013-11-07T13:25:07Z"
library(sqldf)
download.file(url = 'https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv', destfile = './courses/datasciencecoursera/03_gettingAndCleaningData/02_Week02/americanCommunitySurveyData.csv')
acs <- read.csv(file = './courses/datasciencecoursera/03_gettingAndCleaningData/02_Week02/americanCommunitySurveyData.csv', sep = ',')
sqldf('select pwgtp1 from acs where AGEP < 50')
library(sqldf)
install.packages('chron')
install.packages('chron')
library(sqldf)
url <- 'http://biostat.jhsph.edu/~jleek/contact.html'
html <- GET(url)
content <- content(html, as = 'text')
parsedHtml <- htmlParse(content2, asText = TRUE)
parsedHtml
n.readLines(parsedHtml, 1, skip = 10)
?readLines
?nchar
parsedHtml[10]
html[10]
html
nchar(html[10])
html[10]
content[10]
content
nchar(parsedHtml[10])
con <- url('http://biostat.jhsph.edu/~jleek/contact.html')
htmlCode <- readLines(con)
htmlCode[10]
con <- url('http://biostat.jhsph.edu/~jleek/contact.html')
htmlCode <- readLines(con)
nchar(htmlCode[10])
con <- url('http://biostat.jhsph.edu/~jleek/contact.html')
htmlCode <- readLines(con)
nchar(htmlCode[10])
nchar(htmlCode[20])
nchar(htmlCode[30])
nchar(htmlCode[100])
download.file(url = 'https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for', dest = './courses/datasciencecoursera/03_gettingAndCleaningData/02_Week02/noaaData.for')
install.packages('ff')
install.packages('read.fwf')
setRepositories()
install.packages('read.fwf')
getwd()
setwd('courses/datasciencecoursera')
dir.create('./01_exploratoryDataAnalysis')
setwd('./04_exploratoryDataAnalysis/')
dir.create('./01_lectures')
setwd('01_lectures/')
file.create('./01_principlesOfAnalyticGraphs.R')
file.create('./02_exploratoryGraphs1.R')
head(pollution)
pollution <- read.csv('./data/annual_conc_by_monitor_2019.csv')
head(pollution)
names(pollution)
# Uploads .csv on air quality from EPA
pollution <- read.csv('./data/daily_88101_2019.csv.csv')
# Uploads .csv on air quality from EPA
pollution <- read.csv('./data/daily_88101_2019.csv.csv')
# Uploads .csv on air quality from EPA
pollution <- read.csv('./data/daily_88101_2019.csv')
head(pollution)
names(pollution)
## Five number summary
summary(pollution$Arithmetic.Mean)
## Boxplot
boxplot(pollution$Arithmetic.Mean, col = 'blue')
## Boxplot
boxplot(pollution$AQI, col = 'blue')
## Five number summary
summary(pollution$AQI)
## Boxplot
boxplot(pollution$Arithmetic.Mean, col = 'blue')
## Five number summary
summary(pollution$Arithmetic.Mean)
## Histogram
hist(pollution$Arithmetic.Mean, col = 'green')
rug(pollution$Arithmetic.Mean)
hist(pollution$Arithmetic.Mean, col = 'green')
rug(pollution$Arithmetic.Mean)
## Histogram
hist(pollution$Arithmetic.Mean, col = 'green', breaks = 100)
hist(pollution$Arithmetic.Mean, col = 'green', breaks = 100)
rug(pollution$Arithmetic.Mean)
hist(pollution$Arithmetic.Mean, col = 'green', breaks = 50)
rug(pollution$Arithmetic.Mean)
boxplot(pollution$Arithmetic.Mean, col = 'blue')
abline(h = 12)
## Barplot
barplot(table(pollution$County.Code), col = 'wheat', main = 'number of readings in each county')
## Barplot
barplot(table(pollution$County.Name), col = 'wheat', main = 'number of readings in each county')
## Barplot
barplot(table(pollution$County.Code), col = 'wheat', main = 'number of readings in each county')
## Barplot
barplot(table(pollution$State.Code), col = 'wheat', main = 'number of readings in each county')
## Barplot
barplot(table(pollution$State.Code), col = 'wheat', main = 'number of readings in each state')
abline(v = median(pollution$Arithmetic.Mean), col = 'magenta', lwd = 4)
hist(pollution$Arithmetic.Mean, col = 'green', breaks = 50)
rug(pollution$Arithmetic.Mean)
abline(v = 12, lwd = 2)
abline(v = median(pollution$Arithmetic.Mean), col = 'magenta', lwd = 4)
setwd()
getwd()
setwd('./')
getwd()
setwd('/')
getwd()
setwd('/Users/hendrik/courses/datasciencecoursera/04_exploratoryDataAnalysis/01_Week01/01_lectures/')
file.create('./03_exploratoryGraphs2.R')
# Uploads .csv on air quality from EPA
pollution <- data.table::fread('data/RD_501_88101_2012-0.txt')
# Uploads .csv on air quality from EPA
pollution <- data.table::fread('data/RD_501_88101_2012-0.txt', sep = '|')
head(pollution)
names(pollution)
## Five number summary
summary(pollution$`Number of Samples`)
# Uploads .csv on air quality from EPA
pollution <- read.csv('./data/avgpm25.csv', colClasses = c('numeric', 'character', 'factor', 'numeric', 'numeric'))
names(pollution)
## Five number summary
summary(pollution$pm25)
## Boxplot
boxplot(pollution$pm25, col = 'blue')
boxplot(pollution$pm25, col = 'blue')
abline(h = 12)
hist(pollution$pm25, col = 'green', breaks = 50)
rug(pollution$Arithmetic.Mean)
hist(pollution$pm25, col = 'green', breaks = 50)
rug(pollution$pm25)
abline(v = 12, lwd = 2)
abline(v = median(pollution$pm25), col = 'magenta', lwd = 4)
## Characteristics of Exploratory Graphs
## 1. Quick to make
## 2. Made in large batches
## 3. Goal is personal understanding
## 4. Axes / Legends are generally cleaned up (later)
## 5. Color / Size / Shape are primarily used for information
## Specific Example: Air Pollution in the united states
## QUESTION: Are there any counties that exceed the national standard?
## Simple Summaries of Data in one dimension:
## 1. Five Number Summary (Min, 1st Quant, Median, 3rd Quant, Max)
## 2. Boxplots
## 3. Histograms
## 4. Density Plot
## 5. Barplot
# Uploads .csv on air quality from EPA
pollution <- read.csv('./data/avgpm25.csv', colClasses = c('numeric', 'character', 'factor', 'numeric', 'numeric'))
## Five number summary
summary(pollution$pm25)
## Boxplot
boxplot(pollution$pm25, col = 'blue')
abline(h = 12)
## Histogram
hist(pollution$pm25, col = 'green', breaks = 50)
rug(pollution$pm25)
abline(v = 12, lwd = 2)
abline(v = median(pollution$pm25), col = 'magenta', lwd = 4)
## Barplot
barplot(table(pollution$region), col = 'wheat', main = 'number of readings in each state')
## Barplot
barplot(table(pollution$region), col = 'wheat', main = 'number of readings in each region')
pollution <- read.csv('./data/avgpm25.csv', colClasses = c('numeric', 'character', 'factor', 'numeric', 'numeric'))
## boxplot with 2 dimensions
boxplot(pm25 ~ region, data = pollution)
## boxplot with 2 dimensions
boxplot(pm25 ~ region, data = pollution, col = 'red')
abline(v = 12)
boxplot(pm25 ~ region, data = pollution, col = 'red')
abline(v = 12)
abline(h = 12)
## histogram with 2 dimensions
par(mfrow = c(2, 2), mar = c(4, 4, 2, 1))
par(mfrow = c(2, 2), mar = c(4, 4, 2, 1))
hist(subset(pollution, region = 'east')$pm25, col = 'green')
hist(subset(pollution, region = 'west')$pm25, col = 'green')
par(mfrow = c(2, 1), mar = c(4, 4, 2, 1))
hist(subset(pollution, region = 'east')$pm25, col = 'green')
hist(subset(pollution, region = 'west')$pm25, col = 'green')
par(mfrow = c(2, 1), mar = c(4, 4, 2, 1))
hist(subset(pollution, region == 'east')$pm25, col = 'green')
hist(subset(pollution, region =='west')$pm25, col = 'green')
## scatterplot
with(pollution, plot(latitude, pm25))
abline(h = 12, lwd = 2, lty = 2)
## scatterplot
with(pollution, plot(latitude, pm25), col = region)
with(pollution, plot(latitude, pm25), col = region)
abline(h = 12, lwd = 2, lty = 2)
## scatterplot
with(pollution, plot(latitude, pm25, col = region))
with(pollution, plot(latitude, pm25, col = region))
abline(h = 12, lwd = 2, lty = 2)
with(subset(pollution, region = 'west')$pm25, plot(latitutde, pm25, main = "West"))
par(mfrow = c(2, 1), mar = c(5, 4, 2, 1))
with(subset(pollution, region = 'east')$pm25, plot(latitutde, pm25, main = "East"))
with(subset(pollution, region = 'west')$pm25, plot(latitutde, pm25, main = "West"))
par(mfrow = c(2, 1), mar = c(5, 4, 2, 1))
with(subset(pollution, region == 'east')$pm25, plot(latitutde, pm25, main = "East"))
with(subset(pollution, region == 'west')$pm25, plot(latitutde, pm25, main = "West"))
par(mfrow = c(2, 1), mar = c(5, 4, 2, 1))
with(subset(pollution, region == 'east'), plot(latitutde, pm25, main = "East"))
with(subset(pollution, region == 'west'), plot(latitutde, pm25, main = "West"))
par(mfrow = c(2, 1), mar = c(5, 4, 2, 1))
with(subset(pollution, region == 'east'), plot(latitude, pm25, main = "East"))
with(subset(pollution, region == 'west'), plot(latitude, pm25, main = "West"))
library(swirl)
swirl()
2
0
install_course('Exploratory_Data_Analysis')
swirl()
head(pollution)
dim(pollution)
summary(pollution$pm25)
quantile(ppm)
boxplot(ppm, col = 'blue')
abline(12)
abline(h = 12)
hist(ppm, col = 'green')
rug(ppm)
low
high
hist(ppm, col = 'green', breaks = 100)
rug(ppm)
hist(ppm, col = 'green')
abline(v = 12, lwd = 2)
abline(v = median(ppm), col = 'magenta')
abline(v = median(ppm), col = 'magenta', lwd = 4)
names(pollution)
reg <- table(pollution$region)
reg
barplot(reg, col = 'wheat', main = "Number of Counties in Each Region")
boxplot(pm25~region, pollution, col = 'red')
par(mfrow=c(2, 1), mar = c(4,4,2,1))
east <- subset(pollution, region == 'east')
head(east)
hist(east$pm25, col = 'green')
hist(subset(pollution, region == 'west')$pm25, col = 'green')
with(pollution, plot(latitude, pm25))
abline(h = 12)
abline(h = 12, lwd = 2, lty = 2)
plot(pollution$latitude, ppm, col = pollution$region)
abline(h = 12, lwd = 2, lty = 2)
par(mfrow = c(1, 2), mar = c(5, 4, 2, 1))
west <- subset(pollution, region == 'west')
plot(west$latitude, west$pm25, main = 'West')
plot(east$latitude, east$pm25, main = 'East')
getwd()
file.create('./04_plottingSystemsInR.R')
with(cars, plot(speed, distance))
library(datasets)
data(cars)
with(cars, plot(speed, distance))
## Base Plotting System:
## Artist's Palette model <- start with blank canvas and go from there
## Starts with plot function -> use annotation functions to add detail / information
## + Nice and intuitive
## - Impossible to reverse (you need to plan ahead)
## - Difficult to 'translate' plots to other people
## - A plot is just a series of R commands
library(datasets)
data(cars)
with(cars, plot(speed, dist))
library(lattice)
state <- data.frame(state.x77, region = state.region)
xyplot(Life.Exp ~ Income | region, data = state, layout = c(4, 1))
library(ggplot2)
data(mpg)
gplot(displ, hwy, data = mpg)
library(ggplot2)
data(mpg)
qplot(displ, hwy, data = mpg)
install.packages('ggplot2')
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
library(ggplot2)
library(ggplot2)
data(mpg)
qplot(displ, hwy, data = mpg)
install.packages('farver')
library(ggplot2)
data(mpg)
qplot(displ, hwy, data = mpg)
