interaction(f1, f2)
# splits variable x, of length 10, into 10 segments according to the combined factor variable f1, f2
# the interaction() function does not have to be invoked explicitly but is applied to split
split(x, list(f1, f2))
# gives summary of returned result
str(split(x, list(f1, f2)))
# gives summary of returned result but with the dropped argument set to TRUE
str(split(x, list(f1, f2), dropped = TRUE))
# Johns Hopkins Data Science Track Coursera
# Course: 2
# Week: 3
#
# User: g9a2hvk9
# email: g9a2hvk9@gmail.com
# github: github.com/g9a2hvk9
#
#
# LOOP FUNCTIONS - TAPPLY
# split <- function (x, f, drop = FALSE, ...)
#         UseMethod("split")
# <bytecode: 0x7f842317ec00>
#         <environment: namespace:base>
# creates vector, x, of lenth 30, consisting of 10 random normally distributed variables,
# 10 random uniformly distributed variables and 10 random normally distributed variables (all with mean 1)
x <- c(rnorm(10), runif(10), rnorm(10, 1))
# creates factor variable, f, of length 30, consisting of 3 levels with 10 integers each
f <- gl(3, 10)
# returns a list with 3 objects, each object a vector length 10. The function splits vector x
# into 3 elements of 10, and attributes the 10 elements to the 3 respective factors
split(x, f)
# returns a list of the respective mean value of the 3 vectors creates previously with the split function
# by running lapply over the result of the split
lapply(split(x, f), mean)
# loads library of datasets and displays the head info of the airquality dataset
library(datasets)
head(airquality)
# splits airquality dataset by the month variable, by applying subset airquality$month as factor
# and stores the result in variable s
s <- split(airquality, airquality$Month)
# returns means of the individual columns of the objects of list s
# accordingly it returns the means of the various columns, according to month
lapply(s, function(x) colMeans(x[, c("Ozone", "Solar.R", "Wind", "Temp")]))
# returns same result as lapply() function previously but simplified to a matrix
# will output matrix of dim[3, 5] with means for each vector grouped by month
sapply(s, function(x) colMeans(x[, c("Ozone", "Solar.R", "Wind", "Temp")]))
# returns same result as lapply() function previously but simplified to a matrix
# will output matrix of dim[3, 5] with means for each vector grouped by month
# also removes NA values by setting ra.rm to TRUE
sapply(s, function(x) colMeans(x[, c("Ozone", "Solar.R", "Wind", "Temp")], na.rm = TRUE))
# creates variable x and stores 10 random, normally distributed integers
x <- rnorm(10)
# creates factor variable of length 10, with 2 levels of length 5
f1 <- gl(2, 5)
# creates factor variable of length 10, with 5 levels of length 2
f2 <- gl(5, 2)
# combines f1 and f2 to create factor variable of length 10 with 10 levels
interaction(f1, f2)
# splits variable x, of length 10, into 10 segments according to the combined factor variable f1, f2
# the interaction() function does not have to be invoked explicitly but is applied to split
split(x, list(f1, f2))
# gives summary of returned result
str(split(x, list(f1, f2)))
# gives summary of returned result but with the drop argument set to TRUE
str(split(x, list(f1, f2), drop = TRUE))
library(datasets)
data(iris)
?iris
head(iris)
?tapply
tapply(iris["Sepal.Length"], mean, iris["Species"], simplify = TRUE)
tapply(iris["Sepal.Length"], iris["Species"], mean, simplify = TRUE)
?mapply
iris
?tapply
tapply(iris["Sepal.Length"], iris["Species"], mean)
length(iris["Sepal.Length"])
length(iris$"Sepal.Length")
tapply(iris$"Sepal.Length", iris$"Species", mean)
?apply
dim(iris)
apply(iris[, 1:4], 2, mean)
library(datasets)
data(mtcars)
?mtcars
head(mtcars)
tapply(mtcars$mpg, mtcars$cyl, mean)
mean(mtcars$mpg, mtcars$cyl)
with(mtcars, tapply(mpg, cyl, mean))
sapply(mtcars, cyl, mean)
sapply(split(mtcars$mpg, mtcars$cyl), mean)
split(mtcars, mtcars$cyl)
lapply(mtcars, mean)
apply(mtcars, 2, mean)
tapply(mtcars$mpg, mtcars$cyl, mean)
means y- tapply(mtcars$mpg, mtcars$cyl, mean)
means <- tapply(mtcars$mpg, mtcars$cyl, mean)
means[4]
means["4"]
means[1,2]
means[1]
means <- tapply(mtcars$hp, mtcars$cyl, mean)
means
means["8"] - means["4"]
as.numeric((means))
means[3] - means[1]
means <- as.numeric(means)
means
means$1 - means$3
means[1] - means[3]
debug(ls)
ls()
exit
quit
head(iris)
head(iris)
debuggingState(on = FALSE)
head(iris)
iris
head(iris)
tapply(iris$"Sepal.Length", iris$"Species", mean)
apply(iris[, 1:4], 2, mean)
mtcars
with(mtcars, tapply(mpg, cyl, mean))
sapply(mtcars, cyl, mean)
tappl(mtcars$cyl, mtcars$mpg, mean())
tappl(mtcars$cyl, mtcars$mpg, mean
tappl(mtcars$cyl, mtcars$mpg, mean)
tapply(mtcars$cyl, mtcars$mpg, mean)
split(mtcars, mtcars$cyl)
sapply(split(mtcars$mpg, mtcars$cyl), mean)
tapply(mtcars$mpg, mtcars$cyl, mean)
lapply(mtcars, mean)
mean(mtcars$mpg, mtcars$cyl)
apply(mtcars, 2, mean)
means <- tapply(mtcars$hp, mtcars$cyl, mean)
means
means$1 - means$3
means[["4"]] - means[["8“]]
means[["4"]] - means[["8“]]
means <- as.numeric(means)
means
means[1] - means[3]
?matric
?matrix
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
makeVector(5)
set(5)
makeVector()
makeVector(c(1, 3, 5, 6, 2, 6))
x <- c(1, 4, 2, 5, 2, 6)
x <<- mean
x
function(mean) x <<- mean
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
set <- function(y){
x <<- y
m <<- NULL
}
get <- function() x
setinverse <- function(solve) x <<- solve
getinverse <- function() inv
list(set = set, get = get, setmean = setmean, getmean = getmean)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
inv <- x$getinverse()
if(!is.null(inv)){
message("getting cached data")
return(inv)
}
data <- x$get()
inv <- solve(data)
x$setinverse(inv)
inv
}
makeCacheMatrix(x = matrix(1:20, 2, 10))
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
set <- function(y){
x <<- y
m <<- NULL
}
get <- function() x
setinverse <- function(solve) x <<- solve
getinverse <- function() inv
list(set = set, get = get, setinverse = setinverse, getinverse = getinverse)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
inv <- x$getinverse()
if(!is.null(inv)){
message("getting cached data")
return(inv)
}
data <- x$get()
inv <- solve(data)
x$setinverse(inv)
inv
}
makeCacheMatrix(x = matrix(1:20, 2, 10))
cacheSolve(matrix(1:20, 2, 10))
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
set <- function(y){
x <<- y
innv <<- NULL
}
get <- function() x
setinverse <- function(solve) x <<- solve
getinverse <- function() inv
list(set = set, get = get, setinverse = setinverse, getinverse = getinverse)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
inv <- x$getinverse()
if(!is.null(inv)){
message("getting cached data")
return(inv)
}
data <- x$get()
inv <- solve(data)
x$setinverse(inv)
inv
}
makeCacheMatrix(x = matrix(1:20, 2, 10))
cacheSolve(matrix(1:20, 2, 10))
print(x)
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
set <- function(y){
x <<- y
innv <<- NULL
}
get <- function() x
setinverse <- function(solve) x <<- solve
getinverse <- function() inv
list(set = set, get = get, setinverse = setinverse, getinverse = getinverse)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
inv <- x$getinverse()
if(!is.null(inv)){
message("getting cached data")
return(inv)
}
data <- x$get()
inv <- solve(data)
x$setinverse(inv)
inv
}
x
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
set <- function(y){
x <<- y
innv <<- NULL
}
get <- function() x
setinverse <- function(solve) x <<- solve
getinverse <- function() inv
list(set = set, get = get, setinverse = setinverse, getinverse = getinverse)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
inv <- x$getinverse()
if(!is.null(inv)){
message("getting cached data")
return(inv)
}
data <- x$get()
inv <- solve(data)
x$setinverse(inv)
inv
}
x
makeCacheMatrix()
x
mat <- matrix(1:20, 2, 10)
makeCacheMatrix(mat)
x
cacheSolve(mat)
cacheSolve()
x
print(x)
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
set <- function(y){
x <<- y
inv <<- NULL
}
get <- function() x
setinverse <- function(solve) x <<- solve
getinverse <- function() inv
list(set = set, get = get, setinverse = setinverse, getinverse = getinverse)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
inv <- x$getinverse()
if(!is.null(inv)){
message("getting cached data")
return(inv)
}
data <- x$get()
inv <- solve(data)
x$setinverse(inv)
inv
}
makeCacheMatrix(mat)
cacheSolve(makeCacheMatrix())
cacheSolve(makeCacheMatrix(mat))
cacheSolve(makeCacheMatrix(matrix(1:4, 2, 2)))
makeCacheMatrix(matrix(1:4, 2, 2))
cacheSolve()
cacheSolve(matrix(1:4, 2, 2))
makeCacheMatrix(matrix(1:4, 2, 2))
cacheSolve(makeCacheMatrix(matrix(1:4, 2, 2)))
cacheSolve(makeCacheMatrix(matrix(1:16, 4, 4)))
cacheSolve(makeCacheMatrix(matrix(1:100, 10, 10)))
cacheSolve(makeCacheMatrix(matrix(1:4, 2, 2)))
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
set <- function(y){
x <<- y
inv <<- NULL
}
get <- function() x
setinverse <- function(x) solve(x)
getinverse <- function() inv
list(set = set, get = get, setinverse = setinverse, getinverse = getinverse)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
inv <- x$getinverse()
if(!is.null(inv)){
message("getting cached data")
return(inv)
}
data <- x$get()
inv <- solve(data)
x$setinverse(inv)
inv
}
cacheSolve(makeCacheMatrix(matrix(1:100, 10, 10)))
cacheSolve(makeCacheMatrix(matrix(rnorm(100), 10, 10)))
cacheSolve(makeCacheMatrix(matrix(rnorm(1:25), 5, 5)))
cacheSolve(matrix(rnorm(25), 5, 5))
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
set <- function(y){
x <<- y
inv <<- NULL
}
get <- function() x
setinverse <- function(x) solve(x)
getinverse <- function() inv
list(set = set, get = get, setinverse = setinverse, getinverse = getinverse)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
inv <- x$getinverse()
if(!is.null(inv)){
message("getting cached data")
return(inv)
}
data <- x$get()
inv <- solve(data)
x$setinverse(inv)
inv
}
mat <- matrix(rnorm(25), 5, 5)
mat1 <- makeCacheMatrix(mat)
cacheSolve(mat1)
cacheSolve(mat1)
mat1 <- makeCacheMatrix(mat)
cacheSolve(mat1)
makeCacheMatrix$set
makeCacheMatrix$set()
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
set <- function(y){
x <<- y
inv <<- NULL
}
get <- function() x
setinverse <- function(solve) x <<- solve
getinverse <- function() inv
list(set = set, get = get, setinverse = setinverse, getinverse = getinverse)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
inv <- x$getinverse()
if(!is.null(inv)){
message("getting cached data")
return(inv)
}
data <- x$get()
inv <- solve(data)
x$setinverse(inv)
inv
}
mat1 <- makeCacheMatrix(mat)
cacheSolve(mat1)
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
set <- function(y){
x <<- y
inv <<- NULL
}
get <- function() x
setinverse <- function(solve) inv <<- solve
getinverse <- function() inv
list(set = set, get = get, setinverse = setinverse, getinverse = getinverse)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
inv <- x$getinverse()
if(!is.null(inv)){
message("getting cached data")
return(inv)
}
data <- x$get()
inv <- solve(data)
x$setinverse(inv)
inv
}
mat1 <- makeCacheMatrix(mat)
cacheSolve(mat1)
cacheSolve(mat1)
mat1 <- makeCacheMatrix(mat)
cacheSolve(mat1)
cacheSolve(mat1)
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
set <- function(y){
x <<- y
inv <<- NULL
}
get <- function() x
setinverse <- function(inverse) inv <<- inverse
getinverse <- function() inv
list(set = set, get = get, setinverse = setinverse, getinverse = getinverse)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
inv <- x$getinverse()
if(!is.null(inv)){
message("getting cached data")
return(inv)
}
data <- x$get()
inv <- solve(data)
x$setinverse(inv)
inv
}
makeCacheMatrix(matrix(rnorm(16), 4, 4))
A <- makeCacheMatrix(matrix(rnorm(16), 4, 4))
A <- makeCacheMatrix(matrix(rnorm(765625), 875, 875))
A1 <- cacheSolve(A)
A1 <- cacheSolve(A)
makeCacheMatrix(matrix(rnorm(16), 4, 4))
A <- makeCacheMatrix(matrix(rnorm(765625), 875, 875))
A1 <- cacheSolve(A)
A1 <- cacheSolve(A)
View(A1)
A1 <- cacheSolve(A)
A1
