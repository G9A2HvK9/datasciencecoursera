profile
system.time
#Johns Hopkins Data Science Track Coursera
#Course: 2
#Week: 4
#
#User: g9a2hvk9
#email: g9a2hvk9@gmail.com
#github: github.com/g9a2hvk9
#
#
#SIMULATION & PROFILING - PROFILING R CODE
#
# system.time <- function (expr, gcFirst = TRUE)
# {
#         ppt <- function(y) {
#                 if (!is.na(y[4L]))
#                         y[1L] <- y[1L] + y[4L]
#                 if (!is.na(y[5L]))
#                         y[2L] <- y[2L] + y[5L]
#                 paste(formatC(y[1L:3L]), collapse = " ")
#         }
#         if (gcFirst)
#                 gc(FALSE)
#         time <- proc.time()
#         on.exit(message("Timing stopped at: ", ppt(proc.time() -
#                                                            time)))
#         expr
#         new.time <- proc.time()
#         on.exit()
#         structure(new.time - time, class = "proc_time")
# }
# <bytecode: 0x7fb8d102db98>
#         <environment: namespace:base>
# returns elapsed time > user time as system spends time reading from web
system.time(readLines('https://www.jhsph.edu'))
#Johns Hopkins Data Science Track Coursera
#Course: 2
#Week: 4
#
#User: g9a2hvk9
#email: g9a2hvk9@gmail.com
#github: github.com/g9a2hvk9
#
#
#SIMULATION & PROFILING - PROFILING R CODE
#
# system.time <- function (expr, gcFirst = TRUE)
# {
#         ppt <- function(y) {
#                 if (!is.na(y[4L]))
#                         y[1L] <- y[1L] + y[4L]
#                 if (!is.na(y[5L]))
#                         y[2L] <- y[2L] + y[5L]
#                 paste(formatC(y[1L:3L]), collapse = " ")
#         }
#         if (gcFirst)
#                 gc(FALSE)
#         time <- proc.time()
#         on.exit(message("Timing stopped at: ", ppt(proc.time() -
#                                                            time)))
#         expr
#         new.time <- proc.time()
#         on.exit()
#         structure(new.time - time, class = "proc_time")
# }
# <bytecode: 0x7fb8d102db98>
#         <environment: namespace:base>
# returns elapsed time > user time as system spends time reading from web
system.time(readLines('https://www.jhsph.edu'))
# creates function called hilbert which will run on multiple cores
hilbert <- function(n){
i <- 1:n
1 / outer(i - 1, i, '+')
}
# returns elapsed time < user time as expression is run on multiple cores
system.time(hilbert(1000))
#Johns Hopkins Data Science Track Coursera
#Course: 2
#Week: 4
#
#User: g9a2hvk9
#email: g9a2hvk9@gmail.com
#github: github.com/g9a2hvk9
#
#
#SIMULATION & PROFILING - PROFILING R CODE
#
# system.time <- function (expr, gcFirst = TRUE)
# {
#         ppt <- function(y) {
#                 if (!is.na(y[4L]))
#                         y[1L] <- y[1L] + y[4L]
#                 if (!is.na(y[5L]))
#                         y[2L] <- y[2L] + y[5L]
#                 paste(formatC(y[1L:3L]), collapse = " ")
#         }
#         if (gcFirst)
#                 gc(FALSE)
#         time <- proc.time()
#         on.exit(message("Timing stopped at: ", ppt(proc.time() -
#                                                            time)))
#         expr
#         new.time <- proc.time()
#         on.exit()
#         structure(new.time - time, class = "proc_time")
# }
# <bytecode: 0x7fb8d102db98>
#         <environment: namespace:base>
# returns elapsed time > user time as system spends time reading from web
system.time(readLines('https://www.jhsph.edu'))
# creates function which intentionally performs large number of computations to return large number of stored values
hilbert <- function(n){
i <- 1:n
1 / outer(i - 1, i, '+')
}
# stores large  number of values as vector in variable x
x <- hilbert(1000)
# returns elapsed time < user time as svg() expression is run on multiple cores
system.time(svg(x))
#Johns Hopkins Data Science Track Coursera
#Course: 2
#Week: 4
#
#User: g9a2hvk9
#email: g9a2hvk9@gmail.com
#github: github.com/g9a2hvk9
#
#
#SIMULATION & PROFILING - PROFILING R CODE
#
# system.time <- function (expr, gcFirst = TRUE)
# {
#         ppt <- function(y) {
#                 if (!is.na(y[4L]))
#                         y[1L] <- y[1L] + y[4L]
#                 if (!is.na(y[5L]))
#                         y[2L] <- y[2L] + y[5L]
#                 paste(formatC(y[1L:3L]), collapse = " ")
#         }
#         if (gcFirst)
#                 gc(FALSE)
#         time <- proc.time()
#         on.exit(message("Timing stopped at: ", ppt(proc.time() -
#                                                            time)))
#         expr
#         new.time <- proc.time()
#         on.exit()
#         structure(new.time - time, class = "proc_time")
# }
# <bytecode: 0x7fb8d102db98>
#         <environment: namespace:base>
# returns elapsed time > user time as system spends time reading from web
system.time(readLines('https://www.jhsph.edu'))
# creates function which intentionally performs large number of computations to return large number of stored values
hilbert <- function(n){
i <- 1:n
1 / outer(i - 1, i, '+')
}
# stores large  number of values as vector in variable x
x <- hilbert(1000)
# returns elapsed time < user time as svd() expression is run on multiple cores
system.time(svd(x))
#Johns Hopkins Data Science Track Coursera
#Course: 2
#Week: 4
#
#User: g9a2hvk9
#email: g9a2hvk9@gmail.com
#github: github.com/g9a2hvk9
#
#
#SIMULATION & PROFILING - PROFILING R CODE
#
# system.time <- function (expr, gcFirst = TRUE)
# {
#         ppt <- function(y) {
#                 if (!is.na(y[4L]))
#                         y[1L] <- y[1L] + y[4L]
#                 if (!is.na(y[5L]))
#                         y[2L] <- y[2L] + y[5L]
#                 paste(formatC(y[1L:3L]), collapse = " ")
#         }
#         if (gcFirst)
#                 gc(FALSE)
#         time <- proc.time()
#         on.exit(message("Timing stopped at: ", ppt(proc.time() -
#                                                            time)))
#         expr
#         new.time <- proc.time()
#         on.exit()
#         structure(new.time - time, class = "proc_time")
# }
# <bytecode: 0x7fb8d102db98>
#         <environment: namespace:base>
# returns elapsed time > user time as system spends time reading from web
system.time(readLines('https://www.jhsph.edu'))
# creates function which intentionally performs large number of computations to return large number of stored values
hilbert <- function(n){
i <- 1:n
1 / outer(i - 1, i, '+')
}
# stores large  number of values as vector in variable x
x <- hilbert(1000)
# returns elapsed time < user time as svd() expression is run on multiple cores
system.time(svd(x))
Rprof
sample.interval
sample.interval = 1000
sample.interval = 10000
lm(x ~y)
lm(y ~ x)
summaryRprof
set.seed(1)
rpois(5, 2)
library(datasets)
Rprof()
fit <- lm(y ~ x1 + x2)
Rprof(NULL)
